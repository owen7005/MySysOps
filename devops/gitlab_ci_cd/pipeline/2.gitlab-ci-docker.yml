stages:
  - build
  - deploy-test
# 变量
variables:
  LANG: "en_US.UTF-8"
  PROJECT_HOSTGROUP: "linuxea-bbs"
before_script:
  - echo "start now!"
  - export LANG=en_US.UTF-8
  - export LANGUAGE=en_US:en
  - export LC_ALL=en_US.UTF-8 
.base_init: &bash_init
  stage: build
  allow_failure: true
# build镜像	
1/4 docker_build:
  <<: *bash_init
  script:
    - docker_build
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"    
    paths: [image_build.html]
2/4 image_check:
  <<: *bash_init
  script:
    - image_check
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"    
    paths: [gl-container-scanning-report.html]
3/4 DockerBench_Security:
  <<: *bash_init
  script:
    - docker_bench_security
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"    
    paths: [docker_bench_security.log]
4/4 Docker_Dive:
  <<: *bash_init
  script:
    - Docker_Dive
  artifacts:
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"    
    paths: [Docker_Dive.log] 
deploy:
  stage: deploy-test
  environment:
    name: staging
    url: http://172.25.50.17:8080 
  only:
    - master 
  script:
    #- ansible ${PROJECT_HOSTGROUP} -m shell -a "[ -d ${WWWDIR} ]||mkdir ${WWWDIR} -p"
    #- ansible ${PROJECT_HOSTGROUP} -m synchronize -a 'src=./ dest=${WWWDIR}/ rsync_opts=--delete,--exclude=*.json,--exclude=*.yml,--exclude=*.git'
    #- ansible ${ANSIBLEGROUP} -m shell -a "chown -R 400.400 /data/wwwroot/"
    - ansible  ${PROJECT_HOSTGROUP} -m shell -a "echo "$CI_BUILD_TOKEN" | docker login --username "$CI_BUILD_USER" "$REPOSITORY_URL" --password-stdin"
    - ansible  ${PROJECT_HOSTGROUP} -m shell -a "cd /data/ && docker-compose pull"
    - ansible  ${PROJECT_HOSTGROUP} -m shell -a "cd /data/ && docker-compose up -d"
  when: manual    
  allow_failure: false    
#-----------------------Auto_Devops-----------------------------  
.auto_devops: &auto_devops |
  [[ "$TRACE" ]] && set -x
  
  function docker_build() {  
    echo "$CI_BUILD_TOKEN" | docker login --username $CI_BUILD_USER $REPOSITORY_URL --password-stdin
    # docker login -u $CI_BUILD_USER -p $CI_BUILD_TOKEN $REPOSITORY_URL    
    export PROJECT_NAME=$(echo "$CI_PROJECT_PATH_SLUG" |awk -F- '{print $2}')
    export PROJECT_TAG=$(echo "$CI_COMMIT_SHA" |cut -c 1-5)
    export IMAGE_TAG="$REPOSITORY_URL"/"$PROJECT_NAME":"$PROJECT_TAG"
    export IMAGE_TAG_LATEST="$REPOSITORY_URL"/"$PROJECT_NAME":latest
    export CONTAINER_IMAGE="$REPOSITORY_URL"/"$PROJECT_NAME"
    docker run --name docker-dind -i --rm -v /var/run/docker.sock:/var/run/docker.sock -v $PWD/:/www/ docker:stable-dind  docker build -t "$IMAGE_TAG" /www/. \
      && docker tag "$IMAGE_TAG" "$IMAGE_TAG_LATEST" \
      && docker push "$IMAGE_TAG" \
      && docker push "$IMAGE_TAG_LATEST" >> image_build.html
      }
    #------------------------------------------
    # docker pull "$CONTAINER_IMAGE":latest || true
    # docker build -t "$IMAGE_TAG" . \
    # && docker build -t "$IMAGE_TAG_LATEST" . \
    # && docker push "$IMAGE_TAG" \
    # && docker push "$IMAGE_TAG_LATEST" >> image_build.html
    #------------------------------------------
  function image_check() {
    export PROJECT_NAME=$(echo "$CI_PROJECT_PATH_SLUG" |awk -F- '{print $2}')
    export CLAIRR=$(docker inspect --format={{.NetworkSettings.IPAddress}} clair)
    export DINDIRR=$(ip addr show docker0|awk 'NR==3{split($2,a,"/"); print a[1]}')
    export IMAGE_TAG_LATEST="$REPOSITORY_URL"/"$PROJECT_NAME":latest
    if [ `docker ps -a|awk '{print $NF}'|egrep "db"|wc -l` == 1 ];then echo "db is exist"; else docker run -d --name db arminc/clair-db:latest; fi
    if [ `docker ps -a|awk '{print $NF}'|egrep "clair"|wc -l` == 1 ];then echo "clair is exist"; else docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.7; fi
    echo -e "\033[44;37m`date +%F/%T` CVE scanning Start running now ....\033[0m"  
    docker run --name docker-dind -i --rm -v /var/run/docker.sock:/var/run/docker.sock docker:stable-dind  apk add wget ca-certificates \
      && wget -qO ./clair-scanner https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64 \
      && chmod +x ./clair-scanner \
      && echo -e "clairIP:\033[31m\033[01m[ $CLAIRR ]\033[0m\ndockerIP: \033[31m\033[01m\033[05m[ $DINDIRR ]\033[0m\nImages Name: \033[31m\033[01m\033[05m[ $IMAGE_TAG_LATEST ]\033[0m \033[0m" \
      && touch clair-whitelist.yml \
      && while( ! wget -q -O /dev/null http://"$CLAIRR":6060/v1/namespaces ) ; do sleep 1 ; done \
      && retries=0 \
      && echo -e "\033[44;37m`date +%F/%T` Waiting for clair daemon to start\033[0m" \
      && while( ! wget -T 10 -q -O /dev/null http://"$CLAIRR":6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done \
      && ./clair-scanner -c http://"$CLAIRR":6060 --ip "$DINDIRR" -r gl-container-scanning-report.html -l clair.log -w clair-whitelist.yml "$IMAGE_TAG_LATEST" || true
  }
  function docker_bench_security() {
    export PROJECT_NAME=$(echo "$CI_PROJECT_PATH_SLUG" |awk -F- '{print $2}')
    export IMAGE_TAG_LATEST="$REPOSITORY_URL"/"$PROJECT_NAME":latest	  
    docker run -i --rm --net host \
      --pid host \
      --userns host \
      --cap-add audit_control   \
      -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST  \
      -v /var/lib:/var/lib  \
      -v /var/run/docker.sock:/var/run/docker.sock  \
      -v /usr/lib/systemd:/usr/lib/systemd     \
      -v /etc:/etc \
      --label docker_bench_security     \
      docker/docker-bench-security -t "$IMAGE_TAG_LATEST" -c container_images |tee docker_bench_security.log
  }
  function Docker_Dive() {
    export PROJECT_NAME=$(echo "$CI_PROJECT_PATH_SLUG" |awk -F- '{print $2}')
    export IMAGE_TAG_LATEST="$REPOSITORY_URL"/"$PROJECT_NAME":latest	
    docker run --rm -i -v /var/run/docker.sock:/var/run/docker.sock  -e CI=true \
      wagoodman/dive:v0.7 "$IMAGE_TAG_LATEST"  |tee Docker_Dive.log
  }  
before_script:
  - *auto_devops 
