stages:
  - code-check
  - deploy-test
  - dast
  - deploy-production
  - performance
# 变量
variables:
  WWWDIR: "/data/wwwroot"
  ANSIBLEGROUP: "linuxea"
  LANG: "en_US.UTF-8"
  VERSION: "1.11"
  SONAR_URL: "http://10.0.1.61:9000"
  SONAR_KN: "sonar-linuxea"
  SONAR_CFG: "sonar-scanner -Dsonar.host.url=$SONAR_URL -Dsonar.projectKey=$SONAR_KN -Dsonar.projectName=$SONAR_KN -Dsonar.projectBaseDir=/root/src -Dsonar.sources=./ -Dsonar.java.binaries=./"
  website: "http://www.linuxea.com"
before_script:
  - echo "start now!"
  - export LANG=en_US.UTF-8
  - export LANGUAGE=en_US:en
  - export LC_ALL=en_US.UTF-8 
  - sudo chown -R gitlab-runner.gitlab-runner ${PWD} || true  
# &job_docker_group 代码质量检查
.code_check_Static: &job_docker_group
  stage: code-check
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    PATHD: /home/gitlab-runner/Increment/
  allow_failure: true
  services:
    - docker:stable-dind 
# &zap_docker_group 安全漏洞测试
.zap_check: &zap_docker_group
  stage: dast
  image: registry.gitlab.com/gitlab-org/security-products/zaproxy
  variables:
    login_url: "https://example.com/sign-in"
    john_name: "USERNAME"
    john_pwd: "PASSWORD"
  allow_failure: true   
  services:
    - docker:stable-dind  
# 浏览器性能测试    
.performance: &performance
  stage: performance
  image: docker:git
  variables:
    URL: $website
  services:
    - docker:stable-dind   
# 增量生产部署    
.production: &production   
  stage: deploy-production
  environment:
    name: production
    url: https://www.linuxea.com
  only:
    - master      
# sonarqube代码质量检查
1/6 sonarqube:
  stage: code-check
  script: 
    - sonarqube
    - date
  artifacts:
    paths: [sonarqube.json]
# 代码全量静态质量检查
2/6 code_quality:
  <<: *job_docker_group
  script:
    - code_quality
    - date
  artifacts:
    paths: [codeclimate.json]
# 代码增量静态质量检查    
2/6 code_quality_Increment:
  <<: *job_docker_group
  script:
    - code_quality_Increment
    - date
  artifacts:
    paths: [codeclimate.json]
  when: on_failure
# 静态代码安全扫描    
# Static Application Security Testing
3/6 SAST:
  <<: *job_docker_group    
  script:
    - SAST
    - date
  artifacts:
    paths: [gl-sast-report.json]    
# 依赖扫描    
4/6 dependency-scanning:
  <<: *job_docker_group
  script:
    - dependency_scanning
    - date
  artifacts:
    paths: [gl-dependency-scanning-report.json]    
#  except:
#    variables:
#      - $CONTAINER_SCANNING_DISABLE    
# OWASP 依赖扫描    
5/6 dependency-check:
  stage: code-check
  script: 
    - export OWASPDC_DIRECTORY=$PWD/OWASP-Dependency-Check
    - export DATA_DIRECTORY=$OWASPDC_DIRECTORY/data
    - export REPORT_DIRECTORY=$OWASPDC_DIRECTORY/reports
    - dependency_check
    - date
  artifacts:
    paths: 
      - dependency-check-report.json
      - OWASP-Dependency-Check/reports/
# 许可证扫描      
6/6 license_management:
  <<: *job_docker_group
  script:
    - license_management       
    - date
  artifacts:
    paths: [gl-license-management-report.json]  
  except:
    variables:
      - $CONTAINER_SCANNING_DISABLE    
# 安全测试
# Dynamic Application Security Testing
1/2 DAST_ZAP_JSON:
  <<: *zap_docker_group 
  script:  
    - DAST_ZAP_JSON
    - date      
  dependencies:
    -  deploy
  artifacts:
    paths: [gl-dast-report.json]   
#      --volume $PWD:/zap/wrk/:rw -t "owasp/zap2docker-weekly" zap-baseline.py -t $website -g gen.conf -J gl-dast-report.json || true   
2/2 DAST_ZAP_HTML:
  <<: *zap_docker_group
  script:   
    - DAST_ZAP_HTML
    - date     
  artifacts:
    paths: [testreport.html]     
#     --volume $PWD:/zap/wrk/:rw -t "owasp/zap2docker-weekly" zap-baseline.py -t $website -g gen.conf -r testreport.html  || true    
#    - docker run
#      --volume $PWD:/zap/wrk/    
#      --volume /etc/localtime:/etc/localtime:ro     
#      "owasp/zap2docker-stable" zap-baseline.py -t $website -g gen.conf -r testreport.html   
#部署 
deploy:
  stage: deploy-test
  environment:
    name: staging
    url: https://staging.example.com  
  only:
    - master 
  script:
    - ansible ${ANSIBLEGROUP} -m shell -a "[ -d ${WWWDIR} ]||mkdir ${WWWDIR} -p"
    - ansible ${ANSIBLEGROUP} -m synchronize -a 'src=./ dest=${WWWDIR}/ rsync_opts=--delete,--exclude=*.json,--exclude=*.yml,--exclude=*.git'
    #- ansible ${ANSIBLEGROUP} -m shell -a "chown -R 400.400 /data/wwwroot/"
  when: always  

production 10%:
  <<: *production    
  script: echo "deploy-production"
  when: manual
  allow_failure: false    
production 50%:
  <<: *production   
  script: echo "deploy-production"
  when: manual
  allow_failure: false  
production 100%:
  <<: *production 
  script: echo "deploy-production"
  when: manual
  allow_failure: false    
  
Sitespeed.io:
  <<: *performance
  script:
    - Sitespeed
    - date
  artifacts:
    paths:
    - performance.json
    - sitespeed-results/ 
  when: always 
#-----------------------Auto_Devops-----------------------------  
.auto_devops: &auto_devops |  
  [[ "$TRACE" ]] && set -x
  
  function code_quality() { 
    export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    if [ `docker ps -a|egrep "codeclimate|gitlab"|wc -l` -gt 0 ];then  
      echo "`date +%F/%T` this $(docker ps -a|awk '/codeclimate/{print $2}') Will be deleted"
      docker ps -a|docker rm -f $(egrep "gitlab|codeclimate"|awk -F' ' 'END{print $NF}'); 
    else 
      echo "`date +%F/%T` Nothing Codeclimate Runing"; 
    fi   
    docker run --rm \
      --env SOURCE_CODE="$PWD" \
      --volume "$PWD":/code \
      --volume /var/run/docker.sock:/var/run/docker.sock \
      --volume /etc/localtime:/etc/localtime:ro \
      "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code    
    }
  function sonarqube() { 
      echo "`date +%F/%T` sonarqube Start running now ...."      
    docker run --rm \
      --volume  $(pwd):/root/src  \
      --volume /etc/localtime:/etc/localtime:ro \
      --volume /var/run/docker.sock:/var/run/docker.sock \
      "newtmitch/sonar-scanner" $SONAR_CFG  || true
    sudo chown -R gitlab-runner.gitlab-runner ${PWD}    
    }
  function code_quality_Increment() {    
    export VERSION_PATH=$(echo "$CI_REPOSITORY_URL"|awk -F'/' '{print $NF}')    
    export PATH_LAST=$PATHD$VERSION_PATH    
    export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    if [ `docker ps -a|egrep "codeclimate|gitlab"|wc -l` -gt 0 ];then  
      echo "`date +%F/%T` this $(docker ps -a|awk '/codeclimate/{print $2}') Will be deleted"
      docker ps -a|docker rm -f $(egrep "gitlab|codeclimate"|awk -F' ' 'END{print $NF}'); 
    else 
      echo "`date +%F/%T` Nothing Codeclimate Runing"; 
    fi
    if [ -d $PATH_LAST ];then 
      echo "`date +%F/%T` $PATH_LAST is exist"; 
    else 
      mkdir $PATH_LAST -p; 
    fi
    echo "`date +%F/%T` code_quality_Increment Start checking out"
    git archive -o $PWD/version-$(git rev-parse HEAD)-latest.tar.gz $(git rev-parse HEAD) $(git diff --name-only HEAD HEAD~1)
    tar xf version-$(git rev-parse HEAD)-latest.tar.gz -C $PATH_LAST
    echo "`date +%F/%T` code_quality_Increment Start runing codequality ...."
    docker run --rm \
      --env SOURCE_CODE="$PATH_LAST" \
      --volume $PATH_LAST:/code \
      --volume /etc/localtime:/etc/localtime:ro \
      --volume /var/run/docker.sock:/var/run/docker.sock \
      "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code      
    }
  function SAST() { 
    export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed   's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    echo "`date +%F/%T` SAST Start running now ...."
    docker run --rm \
      --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}" \
      --volume "$PWD":/code \
      --volume /etc/localtime:/etc/localtime:ro \
      --volume /var/run/docker.sock:/var/run/docker.sock \
      "registry.gitlab.com/gitlab-org/security-products/sast:${SP_VERSION}" /app/bin/run /code     
    } 
  function dependency_scanning() { 
    export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    echo "`date +%F/%T` dependency_scanning Start running now ...."
    docker run --rm \
      --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}" \
      --volume "$PWD:/code" \
      --volume /etc/localtime:/etc/localtime:ro \
      --volume /var/run/docker.sock:/var/run/docker.sock \
      "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
    }
  function dependency_check()  {
    export OWASPDC_DIRECTORY=$PWD/OWASP-Dependency-Check
    export DATA_DIRECTORY=$OWASPDC_DIRECTORY/data
    export REPORT_DIRECTORY=$OWASPDC_DIRECTORY/reports
    if [ ! -d "$DATA_DIRECTORY" ];then
      echo "`date +%F/%T` Initially creating persistent directories" 
      mkdir -p "$DATA_DIRECTORY" 
      sudo chmod -R 777 "$DATA_DIRECTORY"
      mkdir -p "$REPORT_DIRECTORY"
      sudo chmod -R 777 "$REPORT_DIRECTORY"
    fi  
    echo "`date +%F/%T` dependency_check Start running now ...."    
    docker run --rm \
     --volume $(pwd):/src \
     --volume "$DATA_DIRECTORY":/usr/share/dependency-check/data \
     --volume "$REPORT_DIRECTORY":/report  \
     "owasp/dependency-check" \
     --scan /src \
     --format "ALL" \
     --project "My OWASP Dependency Check Project" \
     --out /report
    echo "`date +%F/%T` copy dependency-check-report.json now ...."        
    cp OWASP-Dependency-Check/reports/dependency-check-report.json $PWD/dependency-check-report.json
    sudo chown -R gitlab-runner.gitlab-runner ${PWD}
   }
  function license_management() {
    export LICENSE_MANAGEMENT_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    if [ `docker ps -a|egrep "license_management"|wc -l` -gt 0 ];then  
      echo "`date +%F/%T` this $(docker ps -a|awk '/license_management/{print $2}') Will be deleted"
      docker ps -a|docker rm -f $(egrep "license_management"|awk -F' ' 'END{print $NF}'); 
    else 
      echo "`date +%F/%T` Nothing license_management Runing"; 
    fi  
    if echo $GITLAB_FEATURES |grep license_management > /dev/null ; then
      # Extract "MAJOR.MINOR" from CI_SERVER_VERSION and generate "MAJOR-MINOR-stable"
      LICENSE_MANAGEMENT_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
      echo "`date +%F/%T` license_management Start running now ...."    
      docker run --volume "$PWD:/code" \
                 "registry.gitlab.com/gitlab-org/security-products/license-management:$LICENSE_MANAGEMENT_VERSION" analyze /code
    else
      echo "`date +%F/%T` License management is not available in your subscription"
    fi
  }
  function DAST_ZAP_HTML() {
    if [ `docker ps -a|egrep "owasp"|wc -l` -gt 0 ];then  
      echo "`date +%F/%T` this $(docker ps -a|awk '/owasp/{print $2}') been deleted" \
      docker ps -a|docker rm -f $(egrep "owasp"|awk -F' ' 'END{print $NF}'); 
    else 
      echo "`date +%F/%T` Nothing owasp/.... Runing"; 
    fi 
    echo "`date +%F/%T` DAST_ZAP_HTML Start running now ...."           
    docker run --rm \
      --volume /etc/localtime:/etc/localtime:ro \
      --volume $PWD:/zap/wrk/:rw -t \
      "registry.gitlab.com/gitlab-org/security-products/zaproxy" zap-baseline.py -t $website -g gen.conf -r testreport.html  || true
     }
  function DAST_ZAP_JSON() {
    if [ `docker ps -a|egrep "owasp"|wc -l` -gt 0 ];then  
      echo "`date +%F/%T` this $(docker ps -a|awk '/owasp/{print $2}') been deleted" \
      docker ps -a|docker rm -f $(egrep "owasp"|awk -F' ' 'END{print $NF}'); 
    else 
      echo "`date +%F/%T` Nothing owasp/.... Runing"; 
    fi  
    echo "`date +%F/%T` DAST_ZAP_JSON Start running now ...."         
    docker run --rm \
      --volume /etc/localtime:/etc/localtime:ro \
      --volume $PWD:/zap/wrk/:rw -t \
      "registry.gitlab.com/gitlab-org/security-products/zaproxy" zap-baseline.py -t $website -g gen.conf -J gl-dast-report.json || true   
     }  
  function Sitespeed() {
    if [ -d gitlab-exporter ];then
      echo "`date +%F/%T` ERROR ! ==> gitlab-exporter is exist"
    else
      echo "`date +%F/%T` install performance and runing sitespeed.io ...."
      mkdir gitlab-exporter -p
      wget -O ./gitlab-exporter/index.js https://gitlab.com/gitlab-org/gl-performance/raw/master/index.js
      mkdir sitespeed-results -p
      echo "`date +%F/%T` Sitespeed Start running now ...."            
      docker run --shm-size=1g --rm \
        --volume "$(pwd)":/sitespeed.io \
        sitespeedio/sitespeed.io:7.1.3 --plugins.add ./gitlab-exporter --outputFolder sitespeed-results $website || true
      cp sitespeed-results/data/performance.json $PWD/performance.json
      sudo chown -R gitlab-runner.gitlab-runner $PWD
     fi
     }     
before_script:
  - *auto_devops      
